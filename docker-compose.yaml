version: "3"
services:
  # PostgreSQL
  db:
    image: postgres:14-alpine
    container_name: device-app-postgres
    volumes:
      - ./data/db:/var/lib/potgresql/data
    env_file:
      - ./device_app/.env
    ports:
      - "5432:5432"
  # Redis
  redis:
    image: redis:5.0
    hostname: redis
    ports:
      - "6379:6379"
  # RabbitMQ
  rabbit:
    hostname: rabbit
    image: rabbitmq:3.9.12
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    ports:
      - "5672:5672"
      - "15672:15672"
  # Django
  server:
    build:
      context: .
      dockerfile: ./server/Dockerfile
    container_name: tcp-app-server
    hostname: server
    env_file:
      - ./server/.env
    ports:
      - "65432:65432"
    depends_on:
        - rabbit
  location_consumer:
    build:
      context: .
      dockerfile: ./location_consumer/Dockerfile
    container_name: location-consumer
    hostname: location_consumer
    env_file:
      - ./location_consumer/.env
    depends_on:
      - rabbit
      - db
      - server
    restart: always
  device_app:
    build:
      context: .
      dockerfile: ./device_app/Dockerfile
    container_name: device-app
    hostname: device_app
    env_file:
      - ./device_app/.env
    # From documentation:
    # However, Compose does not wait until a container is “ready”
    # (whatever that means for your particular application) - only until it’s
    # running. There’s a good reason for this.
    # command: sh ./device_app/scripts/entrypoint.sh db
    volumes:
      # Mount src to app
      - ../..:/code/
    ports:
       - "8000:8000"
    depends_on:
      - db
      - redis
      - rabbit
      - server
      - location_consumer
    restart: always
